################### FIRST APPROACH #######################
#MainWidget:
#definizione del widget e di cosa mostrare nel Widget
#Così definito e richiamato le dimensioni dei widget non sono collegate a quelle della finestra
<MainWidget>:
    Button:
        text: 'Hello'
        size: 400,200 #questa dimensione è in pixel e varia dallo schermo su cui stiamo guardando
        pos: 10,20 #questa dimensione è in pixel
        #per evitare problemi di visione usiamo dp
    Button:
        text: 'Hello2'
        size: "40dp", "20dp" #40dp è la grandezza di un ditp
        pos: "100dp", "200dp"
    Label:
        text: 'Hello2'
        size: "40dp", "20dp"
        pos: "400dp", "400dp"
        color: 100.0/255.0, 150.0/255.0, 133.0/255.0, 1 #rgba color
################### FIRST APPROACH ENDS#######################

################## SEZIONE 1 ##################################
#BoxLayoutExample:
<BoxLayoutExample>:
    orientation: 'vertical'
    Button:
        text: 'A'
        #size e pos non funzioneranno visto che la classe non è definita come Widget
        #bisogna usare size_hint che da una proporzione dello spazio originariamente assegnata
        size_hint: .5, .5
        #pos_hint ha 3 valori per le x e tre per le y
        #si può settare solo un valore alla volta
        #x info sull'inizio del widget
        #center_x info sul centro del widget
        #right info sulla fine del widget
        #y, center_y, top
        #bisogna anche qui dare proporzioni tra 0 e 1
        pos_hint: {'x': .5, 'y': .4}
    Button:
        text: 'B'
        #posso comunque usare size e pos "annullando" size_hint
        size_hint: None, None
        #size: "40dp","40dp"
        #al posto di size posso anche differenziare in:
        width: "100dp"
        height: "40dp"

    Button:
    #C non avendo limitazioni si prende tutto lo spazio rimasto
        text: 'C'

################## FINE SEZIONE 1 ##################################
################## SEZIONE 2 ##################################
#Impariamo un'inception di BoxLayout
#metteremo altra roba al posto del mitico C di prima
#cambiando anche l'orientamento perché altrimenti non è bello
#BoxLayoutExampleSec2:
<BoxLayoutExampleSec2>:
    orientation: 'horizontal'
    Button:
        text: 'A'
        #size e pos non funzioneranno visto che la classe non è definita come Widget
        #bisogna usare size_hint che da una proporzione dello spazio originariamente assegnata
        size_hint: .5, .5
        #pos_hint ha 3 valori per le x e tre per le y
        #si può settare solo un valore alla volta
        #x info sull'inizio del widget
        #center_x info sul centro del widget
        #right info sulla fine del widget
        #y, center_y, top
        #bisogna anche qui dare proporzioni tra 0 e 1
        pos_hint: {'x': .5, 'y': .4}
    Button:
        text: 'B'
        #posso comunque usare size e pos "annullando" size_hint
        size_hint: None, None
        #size: "40dp","40dp"
        #al posto di size posso anche differenziare in:
        width: "100dp"
        height: "40dp"

    BoxLayout:
        orientation: 'vertical'
        #crea uno spazio tra l'elemento e quelli adiacenti
        #ovviamente solo nel BoxLayout
        spacing: "10dp"
        Button:
            text: 'C1'
        Button:
            text: 'C2'
        Button:
            text: 'C3'
        Button:
            text: 'C4'


################## FINE SEZIONE 2 ##################################
################## SEZIONE 3 ##################################
#AnchorLayoutExample:
#questo tipo di Layout permette di dare posizioni definite negli estremi del layout

<AnchorLayoutExample>:
    # right, left, center
    anchor_x: "right" #posiziona il widget a destra
    # bottom, top, center
    anchor_y: "top"
    #Se voglio mostrare più elementi in quella data posizione li metto in un boxLayout
    BoxLayout:
        size_hint: .2, .2
        Button:
            text: 'A'
        Button:
            text: 'B'
################## FINE SEZIONE 3 ##################################
################## SEZIONE 4 ##################################
#GridLayoutExample:
#permette di gestire il layout con righe e colonne
#devono essere dichiarate obligatoriamente, kivy gestirà in ordine di presenza nelle colonne
<GridLayoutExample@GridLayout>:
    rows: 2
    Button:
        text: "A"
        size_hint: .5, .1 #per poter funzionare deve essere dimensionato
                           #allo stesso modo anche quello nella stessa colonna
                           #perché sto cambiando le x
                           #valgono le solite cose su width e hight
    #Facciamo schifo ed al posto del bottone B mettiamo uno dei Layout fatti prima
    BoxLayoutExampleSec2:
    # è una porcata, ma che stile di porcata Madonna, ha ragione, è facile e potente
    Button:
        text: "C"
    Button:
        text: "E"
        size_hint: .5, .1 # è la stessa colonna della A
    Button:
        text: "F"
    Button:
        text: "G"
################## FINE SEZIONE 4 ##################################
################## SEZIONE 5 ##################################
#StackLayoutExample:
#permette di mettere gli elementi su più linee

<StackLayoutExample>:
    #left to right or top tp botton, esempio anche nel codice
    #orientation: "rl-tb" #da destra a sinistra e dall'alto verso il basso
    #padding lo fa dai margini
    # primo top secondo left terzo bottom quarto right
    padding: ("20dp", "20dp", "20dp", "20dp")
    #margine tra gli elementi
    spacing: "20dp", "20dp"
    Button:
        text: 'A'
        size_hint: .2,.2
    Button:
        text: 'B'
        size_hint: .2,.2
    Button:
        text: 'C'
        size_hint: .2,.2
    Button:
        text: 'D'
        size_hint: .2,.2
    Button:
        text: 'E'
        size_hint: .2,.2
    Button:
        text: 'F'
        size_hint: .2,.2
################## FINE SEZIONE 5 ##################################
################## SEZIONE 6 ##################################
#ScrollViewExample:

<ScrollViewExample@ScrollView>:
    StackLayoutExample:
        #per farlo funzionare dobbiamo specificare quanto scrollare
        size_hint: 1, None #100% per il verticale
        #height: 4000 #così sarà un problema scorrere della grandezza giusta
        height: self.minimum_height # così si prende la minima lunghezza
                                    # è una figata PAZZESCA

################## FINE SEZIONE 6 ##################################
################## SEZIONE 7 ##################################
#PageLayoutExample:
#permette di muoversi tra le diverse pagine
#semplicemente trascinando con il mouse
#Anche questo è una figata
<PageLayoutExample@PageLayout>:
    MainWidget:
    BoxLayoutExample:
    AnchorLayoutExample:
    GridLayoutExample:
################## FINE SEZIONE 7 ##################################
################## ESERCIZIO LAYOUT 1 ##################################
################## Layout calcolatrice ###############################
#MainCalcLayout:
<MainCalcLayout@BoxLayout>:
    canvas:
        Color:
            rgba: 38 / 255.0, 50 / 255.0, 56 / 255.0, 0.8
        Rectangle:
            size: self.size
            pos:self.pos

    orientation: 'vertical'
    CalcBoxLayout:
    Label:
        id: label_count
        size_hint: 1, .3
        text: '0'
        text_size: self.size
        halign: "right"
        valign: 'middle'
        font_size: label_count.height - 100
        color: 1,1,1,1
    TabCalcLayout:

<CalcBoxLayout@BoxLayout>:
    orientation: 'horizontal'
    size_hint_y: None
    height: icon_settings_topbar.height
    pos_hint: {'center_x': .5, 'center_y': .95}
    MDIconButton:
        id: icon_settings_topbar
        icon: "settings-helper"
        theme_icon_color: 'Custom'
        icon_color: 1,1,1,1

    Label:
        id: label_top
        text: 'Standard'
        bold: True
        color: 0,0,0,1
        pos_hint: {'x': 60 }
        color: 1,1,1,1

<TabCalcLayout@GridLayout>:
    rows: 6
    cols: 4
    spacing: '2dp'
    padding: '2dp'
    Button:
        text: '%'
        background_color: 105/255.0, 105/255.0, 105/255.0, 1
    Button:
        text: 'CE'
        background_color: 105/255.0, 105/255.0, 105/255.0, 1
    Button:
        text: 'C'
        background_color: 105/255.0, 105/255.0, 105/255.0, 1
    Button:
        text: '<-'
        background_color: 105/255.0, 105/255.0, 105/255.0, 1
    Button:
        text: '1/x'
        background_color: 105/255.0, 105/255.0, 105/255.0, 1
    Button:
        text: 'x*x'
        background_color: 105/255.0, 105/255.0, 105/255.0, 1
    Button:
        text: 'sqrt(x)'
        background_color: 105/255.0, 105/255.0, 105/255.0, 1
    Button:
        text: '/'
        background_color: 105/255.0, 105/255.0, 105/255.0, 1
    Button:
        text: '7'
        background_color: 50/255.0, 50/255.0, 50/255.0, 1
    Button:
        text: '8'
        background_color: 50/255.0, 50/255.0, 50/255.0, 1
    Button:
        text: '9'
        background_color: 50/255.0, 50/255.0, 50/255.0, 1
    Button:
        text: 'X'
        background_color: 105/255.0, 105/255.0, 105/255.0, 1
    Button:
        text: '4'
        background_color: 50/255.0, 50/255.0, 50/255.0, 1
    Button:
        text: '5'
        background_color: 50/255.0, 50/255.0, 50/255.0, 1
    Button:
        text: '6'
        background_color: 50/255.0, 50/255.0, 50/255.0, 1
    Button:
        text: '-'
        background_color: 105/255.0, 105/255.0, 105/255.0, 1
    Button:
        text: '1'
        background_color: 50/255.0, 50/255.0, 50/255.0, 1
    Button:
        text: '2'
        background_color: 50/255.0, 50/255.0, 50/255.0, 1
    Button:
        text: '3'
        background_color: 50/255.0, 50/255.0, 50/255.0, 1
    Button:
        text: '+'
        background_color: 105/255.0, 105/255.0, 105/255.0, 1
    Button:
        text: '+/-'
        background_color: 0/255.0, 0/255.0, 0/255.0, 1
    Button:
        text: '0'
        background_color: 50/255.0, 50/255.0, 50/255.0, 1
    Button:
        text: '.'
        background_color: 50/255.0, 50/255.0, 50/255.0, 1
    Button:
        text: '='
        background_color: 26/255.0, 132/255.0, 182/255.0, 1
################## FINE ESERCIZIO ##################################
################## SEZIONE 8 ##################################
#Vary widget
#WidgetExample:
<WidgetExample>:
    canvas:
        Color:
            rgba: 0,0,0,1
        Rectangle:
            size: self.size
            pos:self.pos
    cols: 3
    ToggleButton:
        #questo è un bottone ma non viene cliccato. Si attiva quando lo clicchi
        #e si disattiva se ripremuto
        text: 'OFF'
        #sto passando alla funzione le proprietà del toggle botton
        on_state: root.on_toggle_botton_state(self)
        size_hint: None, 1
        width: "100dp"
    Button:
        text: "cliccami"
        #per on_press non devo usare self.on_button_click()
        #self si riferisce al bottone
        #per riferirmi alla classe che sto usando devo mettere root.on_button_click()
        #questo ovviamente per come è stato definito il codice py
        on_press: root.on_button_click() #sono necessarie le parentisi
    Label:
        #posso fare questa posizione se e solo se sono stato bravo ed ho le mie
        #StingProperty nel file py
        text: root.my_text
        #Per usare un font specifico lo devo spostare nella cartella del prgetto
        #immaginiamo sia salvato nella cartella progetto/fonts/Lcd.ttf:
        #font_name: 'fonts/Lcd.ttf'
        font_name: 'Arial'
        font_size: '20dp'
        color: 1, .5, 1, 1
################## FINE SEZIONE 8 ##################################
################## ESERCIZIO COUNTER ##################################
#CREIAMO UN COUNTER CON LE NOSTRE MANI
#CounterExample:

<CounterExample>:
    canvas:
        Color:
            rgba: 0,0,0,1
        Rectangle:
            size: self.size
            pos: self.pos
    cols: 3
    ToggleButton:
        id: toggle
        text: 'OFF'
        on_state: root.on_toggle_botton_state(self, incr)
        size_hint: None, 1
        width: "100dp"
    Button:
        id: incr
        text: 'INCR'
        #a questa funzione sto passando tutte le proprietà del
        #ToggleButton che ha per id toggle
        on_press: root.on_button_click(toggle)
        disabled: True
    Label:
        text: root.my_text
        font_name: 'Arial'
        font_size: '20dp'
        color: 1, .5, 1, 1
    Switch:
        id: switch
        size_hint: None, 1
        width: "100dp"
        active: True
        #on_active è la stessa cosa di on_state
        #ma a noi piace complicarci la vita, quindi EVVAi
        on_active: root.on_switch_active(self)
    Slider:
        id: slider
        #setto il minimo ed il massimo per lo slider
        min: 0
        max: 100
        #setto un valore di partenza
        value: 50
        on_value: root.display_slider(self, label_slider)
        orientation: 'vertical' # oppure horizontal
        #Ho dato a disabled lo stesso stato dello switch con un not davanti
        #ho sfruttato un po' gli ID, togo
        disabled: not switch.active
    #Adesso, quel label è troppo piccolo per tutto lo spazio rimasto
    #se ci volgio mettere dentro qualche altra cosa devo, ovviamente,
    #fare un box layout
    BoxLayout:
        orientation: 'vertical'
        Label:
            id: label_slider
            #bella Paolo, funziona, ma si può anche fare più easy, ovviamente
            #text: root.slider_text
            #attraverso gli ID posso lavorare direttamente sul .kv, FICO
            text: str(int(slider.value))
            font_name: 'Arial'
            font_size: '20dp'
            color: 1, .5, 1, 1
        ProgressBar:
        #il valore minimo è sempre zero, non si può personalizzare
            max: 100
            value: slider.value
    #vediamo ora come metterci dentro del bel testo
    TextInput:
        id: my_text_input
        size_hint: None, 1
        width: "100dp"
        text: 'foo'
        #Di default questo coso mi permette di andare a capo con Invio.
        #Se non volessi una cosa del genere, ma uscire dalla casella con Invio:
        multiline: False
        #se voglio che il testo sia validato, una volta premuto invio:
        #richiamo una funzione che scriva nel label anziché farlo direttamente
        on_text_validate: root.on_text_validate(self)
    Label:
        text: "Stupidpo: " + root.input_text


 ################## FINE ESERCIZIO ##################################

################## SEZIONE 9 ##################################
#ImagesExample:

<ImagesExample@GridLayout>:
    cols: 3
    Image:
        source: "folder/subfolder/img.jpg"
    Image:
        source: "folder/subfolder/img.jpg"
        #con questa proprietà ci permette di espandere l'iimagine
        #oltre la sua grandezza normale
        allow_stretch: True
    Image:
        source: "folder/subfolder/img.jpg"
        #aggiungendo anche keep_ratio: False, le proporzioni dell'immagine non
        #verranno più rispettate. L'iimagine occuperà tutto lo spazio della
        #griglia
        allow_stretch: True
        keep_ratio: False
################## FINE SEZIONE 9 ##################################

 ################## SEZIONE 10 ##################################
# parliamo del canvas
# nel canvas puoi disegnare cose, forme, fare linee ed altre cagate di questo tipo
# canvas:
    # Color:
        # rgb: 0, 0, 1
    # Line:
        # circle: (200,200, 100)
    # Color:
        # rgb: 1, 0, 0
    # Line:
        # circle: (200,200, 100)
# dobbiamo ricordare che il canvas è una lista di elementi
# quindi saranno prodotti da quella lista colore, poi cerchio di quel colore, ecc...

#In .kv posso dichiarare delle variabili
#:set s dp(150)
CanvasExample8:
<CanvasExample1>:
    canvas:
        Color:
            rgba: 0,0,0,1
        Rectangle:
            size: self.size
            pos: self.pos
        Color:
            rgba: 1,1,1,1
        # posso inserire il canvas in qualunque elemento
        Rectangle:
            id: rect
            #pos: dp(100), dp(200) #ricorda che dp sono i pixel
            size: s, s
            #Se lo volessi al centro dello schermo:
            #la posizione riguarda l'angolo in basso a destra quindi
            #dobbiamo sottrarre la lunghezza del quadrato che abbiamo
            #settato come s in precedenza
            pos: self.center_x -s/2, self.center_y -s/2
        Ellipse:
            pos: 100, 200
            size: s, s/2
        Line:
            points: (0, 0, 100, 100, 200, 0, self.width, 100) # sono due tuple, si crea una linea che va
            #da (0,0) a (100, 100)
        Line:
            points: (0, self.height, self.width * 1/4, self.height - s, self.width * 2/4, self.height, self.width * 3/4, self.height - s,self.width, self.height)
            width: 3 # aumenta lo spessore della linea

<CanvasExample2>:
    #esercizio scemotto, disegna due linee ed un palla al centro
    canvas:
        Color:
            rgba: 0,0,0,1
        Rectangle:
            size: self.size
            pos: self.pos
        Color:
            rgba: 1,1,1,1
        Line:
            points: (self.width/2, 0, self.width/2, self.height)
            width: 2
        Line:
            points: (0, self.height/2, self.width, self.height/2)
            width: 2
        Ellipse:
            size: 50, 50
            pos: self.center_x - 25, self.center_y - 25

<CanvasExample3>:
    #disegnamo forme con un contorno
    canvas:
        Color:
            rgba: 0,0,0,1
        Rectangle:
            size: self.size
            pos: self.pos
        Color:
            rgba: 1,1,1,1
        Line:
            circle: (200, 200, 100) #center_x, center_y, radius
            width: 2
        Color:
            rgb: 1,0,0,.3
        Line:
            ellipse: (500, 300, 100, 200) #center_x, center_y, radius_x, radius_y
            width: 4
        Color:
            rgba: 0,0,1, 1
        Line:
            rectangle: (800, 100 , 300, 200) #x,y, base ,altezza

<CanvasExample4>:
    Button:
        pos: 100, 100
        size: 40, 40
        text: "A"
        on_press: root.move_rect()

<CanvasExample6>:
    canvas:
        Color:
            rgba: 0,0,0,1
        Rectangle:
            size: self.size #dovrebbe funzionare anche root.size
            pos: self.pos
    #sposta le coordinate del canvas
    #il rettangolo dentro un relative layout non è più
    #al limite basso, proprio perché lui si trova sempre a  0,0
    #ma le coordinate sono spostate
    RelativeLayout:
        #il bottone è un widget, quindi avrà a disposizione un canvas
        #canvas.before: #.before muove l'istruzione prima del widget di riferimento
        #(sposta in secondo piano)
        #ovviamente esiste anche canvas.after
        canvas:
            Color:
                rgba: 1,1,1,1
            Rectangle:
        pos: 100, 100

<CanvasExample7>:
    canvas:
        Color:
            rgba: 0,0,0,1
        Rectangle:
            size: self.size
            pos: self.pos
    BoxLayout:
        size: root.size #qui dobbiamo mettere root e non self, perché quest'ultimo è riferito al BoxLayout
        Button:
            #così posso creare un contorno per il mio bottone. Ecco come funziona kivyMD
            canvas:
                Color:
                    rgba: 1,1,0,1
                Line:
                    #Questi self ovviamente sono riferiti al bottone
                    rectangle: (10,10,self.width -20, self.height - 20)
            text: 'A'
        Button:
            text: 'B'

<CanvasExample8@GridLayout>:
    cols: 3
    canvas:
        Color:
            rgba: 0,0,0,1
        Rectangle:
            size: self.size
            pos: self.pos

    RelativeLayout:
        canvas:
            Color:
                rgba: 0,1,0,1
            Rectangle:
                size: self.size

    RelativeLayout:
        canvas:
            Color:
                rgba: 1,1,1,1
            Rectangle:
                size: self.size

    RelativeLayout:
        canvas:
            Color:
                rgba: 1,0,0,1
            Rectangle:
                size: self.size
################## FINE SEZIONE 10 ##################################